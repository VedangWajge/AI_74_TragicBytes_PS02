import React, { useState, useRef, useEffect } from 'react';
import './Chatbot.css';
import axios from 'axios';

const Chatbot = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatBoxRef = useRef(null);

  useEffect(() => {
    chatBoxRef.current.scrollTop = chatBoxRef.current.scrollHeight;
  }, [messages]);

  const handleSendMessage = async () => {
    if (input.trim()) {
      const userMessage = {
        sender: 'user',
        text: input,
        id: Date.now(),
      };

      setMessages((prevMessages) => [...prevMessages, userMessage]);
      setInput('');

      setIsLoading(true);

      // Fetch the response from the API
      const botMessage = await getBotResponse(input);
      setMessages((prevMessages) => [
        ...prevMessages,
        { sender: 'bot', text: botMessage, id: Date.now() },
      ]);
      setIsLoading(false);
    }
  };

  // Function to get the bot response from your API
  const getBotResponse = async (userInput) => {
    try {
      const response = await axios.post(
        'https://api.example.com/endpoint',  // Replace with the actual API URL
        { input: userInput },
        {
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer AIzaSyBP3e9IS-p9JEHiFco6iR7GH2SAnLKYHLY`, // Replace with your actual API key
          },
        }
      );

      // Assuming the API returns a response in the "response" field
      if (response.data && response.data.response) {
        return response.data.response;  // Modify based on your API's response
      } else {
        return 'Sorry, something went wrong.';
      }
    } catch (error) {
      console.error('Error fetching bot response:', error);
      return 'An error occurred. Please try again later.';
    }
  };

  return (
    <div className="chatbot-container">
      <div className="chat-header">
        <div className="chat-title">AI Chatbot</div>
        <div className="chat-status">Online</div>
      </div>

      <div className="chat-box" ref={chatBoxRef}>
        {messages.map((message) => (
          <div
            key={message.id}
            className={`message ${message.sender === 'user' ? 'user-message' : 'bot-message'}`}
          >
            <div className="message-text">{message.text}</div>
          </div>
        ))}
        {isLoading && (
          <div className="bot-message loading">
            <div className="message-text">...</div>
          </div>
        )}
      </div>

      <div className="chat-input">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Type your message..."
          disabled={isLoading}
        />
        <button onClick={handleSendMessage} disabled={isLoading}>
          {isLoading ? 'Sending...' : 'Send'}
        </button>
      </div>
    </div>
  );
};

export default Chatbot;
